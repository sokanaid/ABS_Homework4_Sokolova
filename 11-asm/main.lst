     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  TRAIN
     8                                  global  SHIP
     9                                  global  PLANE
    10                                  
    11                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> extern  CLOCKS_PER_SEC
    15                              <1> 
    16                              <1> extern  InContainer
    17                              <1> extern  InRndContainer
    18                              <1> extern  OutContainer
    19                              <1> extern  PerimeterSumContainer
    20                              <1> 
    21                              <1> ;-------------------------------------------------------------
    22                              <1> ; Вывод строки символов из буфера
    23                              <1> %macro	PrintStrBuf 2
    24                              <1>         mov rdi, %2
    25                              <1>         mov rsi, %1
    26                              <1>         xor rax, rax
    27                              <1>         call fprintf
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> ;-------------------------------------------------------------
    31                              <1> ; Вывод строки, передаваемой непосредственно макросу
    32                              <1> %macro  PrintStr    2
    33                              <1>     section .data
    34                              <1>         %%arg1  db  %1,0        ; first argument
    35                              <1>     section .text               ; the printf arguments
    36                              <1>         mov rdi, %2
    37                              <1>         mov rsi, %%arg1
    38                              <1>         mov rax, 0              ; no floating point
    39                              <1>         call fprintf
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> ;-------------------------------------------------------------
    43                              <1> ; Вывод строки, передаваемой непосредственно макросу
    44                              <1> ; с переводом на следующую строку
    45                              <1> %macro  PrintStrLn    2
    46                              <1>     section .data
    47                              <1>         %%arg1  db  %1,10,0     ; first argument
    48                              <1>     section .text               ; the printf arguments
    49                              <1>         mov rdi, %2
    50                              <1>         mov rsi, %%arg1
    51                              <1>         mov rax, 0              ; no floating point
    52                              <1>         call fprintf
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;-------------------------------------------------------------
    56                              <1> ; Вывод целого числа
    57                              <1> %macro  PrintInt    2
    58                              <1>     section .data
    59                              <1>         %%arg1  db  "%d",0     ; first argument
    60                              <1>     section .text               ; the printf arguments
    61                              <1>         mov rdi, %2
    62                              <1>         mov rsi, %%arg1
    63                              <1>         mov rdx, %1
    64                              <1>         mov rax, 0              ; no floating point
    65                              <1>         call fprintf
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> ;-------------------------------------------------------------
    69                              <1> ; Вывод 64-разрядного беззнакового целого числа
    70                              <1> %macro  PrintLLUns    2
    71                              <1>     section .data
    72                              <1>         %%arg1  db  "%llu",0     ; first argument
    73                              <1>     section .text               ; the printf arguments
    74                              <1>         mov rdi, %2
    75                              <1>         mov rsi, %%arg1
    76                              <1>         mov rdx, %1
    77                              <1>         mov rax, 0              ; no floating point
    78                              <1>         call fprintf
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> ;-------------------------------------------------------------
    82                              <1> ; Вывод действительного числа двойной точности
    83                              <1> %macro  PrintDouble    2
    84                              <1>     section .data
    85                              <1>         %%arg1  db  "%g",0     ; first argument
    86                              <1>     section .text               ; the printf arguments
    87                              <1>         mov rdi, %2
    88                              <1>         mov rsi, %%arg1
    89                              <1>         movsd xmm0, %1
    90                              <1>         mov rax, 1              ; no floating point
    91                              <1>         call fprintf
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> ;-------------------------------------------------------------
    95                              <1> ; Вывод содержимого контейнера
    96                              <1> %macro  PrintContainer    3
    97                              <1>     mov     rdi, %1
    98                              <1>     mov     esi, %2
    99                              <1>     mov     rdx, %3
   100                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   101                              <1>     call    OutContainer
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ;-------------------------------------------------------------
   105                              <1> ; Вычисление суммы периметров фигур в контейнере
   106                              <1> %macro  ContainerSum    3
   107                              <1>     mov     rdi, %1
   108                              <1>     mov     rsi, %2
   109                              <1>     call    PerimeterSumContainer
   110                              <1>     movsd   %3, xmm0
   111                              <1> %endmacro
   112                              <1> 
   113                              <1> ;-------------------------------------------------------------
   114                              <1> ; Открытие файла для чтения, записи
   115                              <1> %macro  FileOpen   3
   116                              <1>     section .data
   117                              <1>         %%rw  db  %2,0          ; признак доступа
   118                              <1>     section .text               ; the printf arguments
   119                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   120                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   121                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   122                              <1>         call    fopen
   123                              <1>         mov     [%3], rax
   124                              <1> %endmacro
   125                              <1> 
   126                              <1> ;-------------------------------------------------------------
   127                              <1> ; Закрытие открытого файла
   128                              <1> %macro  FileClose   1
   129                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   130                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   131                              <1>     call    fclose
   132                              <1> %endmacro
   133                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    TRAIN   dd  1
    15 00000004 02000000                    SHIP    dd  2
    16 00000008 03000000                    PLANE   dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen  db "-n",0
    20 0000003D 2D6600                      fileGen  db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27 00000141 00000000                    len         dd  0           ; Количество элементов в массиве
    28                                  section .bss
    29 00000000 <res 00000004>              argc        resd    1
    30 00000004 <res 00000004>              num         resd    1
    31 00000008 <res 00000008>              sum         resq    1
    32 00000010 <res 00000008>              start       resq    1       ; начало отсчета времени
    33 00000018 <res 00000008>              delta       resq    1       ; интервал отсчета времени
    34 00000020 <res 00000010>              startTime   resq    2       ; начало отсчета времени
    35 00000030 <res 00000010>              endTime     resq    2       ; конец отсчета времени
    36 00000040 <res 00000010>              deltaTime   resq    2       ; интервал отсчета времени
    37 00000050 <res 00000008>              ifst        resq    1       ; указатель на файл, открываемый файл для чтения фигур
    38 00000058 <res 00000008>              ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    39 00000060 <res 00000008>              ofst2       resq    1       ; указатель на файл, открываемый файл для записи периметра
    40 00000068 <res 00027100>              cont        resb    160000  ; Массив используемый для хранения данных
    41                                  
    42                                  section .text
    43                                      global main
    44                                  main:
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp,rsp
    47                                  
    48 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    49 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    50 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    51                                  
    52                                  .printArguments:
    53                                      PrintStrLn "The command and arguments:", [stdout]
    53                              <1>  section .data
    53 00000145 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    53 0000014E 6E6420616E64206172- <1>
    53 00000157 67756D656E74733A0A- <1>
    53 00000160 00                  <1>
    53                              <1>  section .text
    53 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    53 00000019 48BE-               <1>  mov rsi, %%arg1
    53 0000001B [4501000000000000]  <1>
    53 00000023 B800000000          <1>  mov rax, 0
    53 00000028 E8(00000000)        <1>  call fprintf
    54 0000002D BB00000000                  mov rbx, 0
    55                                  .printLoop:
    56                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    56 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    56 0000003A 498B74DD00          <1>  mov rsi, %1
    56 0000003F 4831C0              <1>  xor rax, rax
    56 00000042 E8(00000000)        <1>  call fprintf
    57                                      PrintStr    10, [stdout]
    57                              <1>  section .data
    57 00000161 0A00                <1>  %%arg1 db %1,0
    57                              <1>  section .text
    57 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    57 0000004F 48BE-               <1>  mov rsi, %%arg1
    57 00000051 [6101000000000000]  <1>
    57 00000059 B800000000          <1>  mov rax, 0
    57 0000005E E8(00000000)        <1>  call fprintf
    58 00000063 48FFC3                      inc rbx
    59 00000066 4C39E3                      cmp rbx, r12
    60 00000069 7CC7                        jl .printLoop
    61                                  
    62 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    63 0000006F 741F                        je .next1
    64                                      PrintStrBuf errMessage1, [stdout]
    64 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    64 00000079 48BE-               <1>  mov rsi, %1
    64 0000007B [4000000000000000]  <1>
    64 00000083 4831C0              <1>  xor rax, rax
    64 00000086 E8(00000000)        <1>  call fprintf
    65 0000008B E93D050000                  jmp .return
    66                                  .next1:
    67                                      PrintStrLn "Start", [stdout]
    67                              <1>  section .data
    67 00000163 53746172740A00      <1>  %%arg1 db %1,10,0
    67                              <1>  section .text
    67 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    67 00000098 48BE-               <1>  mov rsi, %%arg1
    67 0000009A [6301000000000000]  <1>
    67 000000A2 B800000000          <1>  mov rax, 0
    67 000000A7 E8(00000000)        <1>  call fprintf
    68                                      ; Проверка второго аргумента
    69 000000AC 48BF-                       mov rdi, rndGen
    69 000000AE [3A00000000000000] 
    70 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    71 000000BA E8(00000000)                call strcmp
    72 000000BF 4883F800                    cmp rax, 0          ; строки равны "-n"
    73 000000C3 743C                        je .next2
    74 000000C5 48BF-                       mov rdi, fileGen
    74 000000C7 [3D00000000000000] 
    75 000000CF 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    76 000000D3 E8(00000000)                call strcmp
    77 000000D8 4883F800                    cmp rax, 0          ; строки равны "-f"
    78 000000DC 0F84C2000000                je .next3
    79                                      PrintStrBuf errMessage2, [stdout]
    79 000000E2 488B3C25[00000000]  <1>  mov rdi, %2
    79 000000EA 48BE-               <1>  mov rsi, %1
    79 000000EC [BF00000000000000]  <1>
    79 000000F4 4831C0              <1>  xor rax, rax
    79 000000F7 E8(00000000)        <1>  call fprintf
    80 000000FC E9CC040000                  jmp .return
    81                                  .next2:
    82                                      ; Генерация случайных фигур
    83 00000101 498B7D10                    mov rdi, [r13+16]
    84 00000105 E8(00000000)                call atoi
    85 0000010A 890425[04000000]            mov [num], eax
    86                                      PrintInt [num], [stdout]
    86                              <1>  section .data
    86 0000016A 256400              <1>  %%arg1 db "%d",0
    86                              <1>  section .text
    86 00000111 488B3C25[00000000]  <1>  mov rdi, %2
    86 00000119 48BE-               <1>  mov rsi, %%arg1
    86 0000011B [6A01000000000000]  <1>
    86 00000123 488B1425[04000000]  <1>  mov rdx, %1
    86 0000012B B800000000          <1>  mov rax, 0
    86 00000130 E8(00000000)        <1>  call fprintf
    87                                      PrintStrLn "", [stdout]
    87                              <1>  section .data
    87 0000016D 0A00                <1>  %%arg1 db %1,10,0
    87                              <1>  section .text
    87 00000135 488B3C25[00000000]  <1>  mov rdi, %2
    87 0000013D 48BE-               <1>  mov rsi, %%arg1
    87 0000013F [6D01000000000000]  <1>
    87 00000147 B800000000          <1>  mov rax, 0
    87 0000014C E8(00000000)        <1>  call fprintf
    88 00000151 8B0425[04000000]            mov eax, [num]
    89 00000158 83F801                      cmp eax, 1
    90 0000015B 0F8C10040000                jl .fall1
    91 00000161 3D10270000                  cmp eax, 10000
    92 00000166 0F8F05040000                jg .fall1
    93                                      ; Начальная установка генератора случайных чисел
    94 0000016C 4831FF                      xor     rdi, rdi
    95 0000016F 4831C0                      xor     rax, rax
    96 00000172 E8(00000000)                call    time
    97 00000177 4889C7                      mov     rdi, rax
    98 0000017A 4831C0                      xor     rax, rax
    99 0000017D E8(00000000)                call    srand
   100                                      ; Заполнение контейнера случайными фигурами
   101 00000182 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   101 00000184 [6800000000000000] 
   102 0000018C 48BE-                       mov     rsi, len    ; передача адреса для длины
   102 0000018E [4101000000000000] 
   103 00000196 8B1425[04000000]            mov     edx, [num]  ; передача количества порождаемых фигур
   104 0000019D E8(00000000)                call    InRndContainer
   105 000001A2 EB56                        jmp .task2
   106                                  
   107                                  .next3:
   108                                      ; Получение фигур из файла
   109                                      FileOpen [r13+16], "r", ifst
   109                              <1>  section .data
   109 0000016F 7200                <1>  %%rw db %2,0
   109                              <1>  section .text
   109 000001A4 498B7D10            <1>  mov rdi, %1
   109 000001A8 48BE-               <1>  mov rsi, %%rw
   109 000001AA [6F01000000000000]  <1>
   109 000001B2 B800000000          <1>  mov rax, 0
   109 000001B7 E8(00000000)        <1>  call fopen
   109 000001BC 48890425[50000000]  <1>  mov [%3], rax
   110                                      ; Заполнение контейнера фигурами из файла
   111 000001C4 48BF-                       mov     rdi, cont           ; адрес контейнера
   111 000001C6 [6800000000000000] 
   112 000001CE 48BE-                       mov     rsi, len            ; адрес для установки числа элементов
   112 000001D0 [4101000000000000] 
   113 000001D8 488B1425[50000000]          mov     rdx, [ifst]         ; указатель на файл
   114 000001E0 4831C0                      xor     rax, rax
   115 000001E3 E8(00000000)                call    InContainer         ; ввод данных в контейнер
   116                                      FileClose [ifst]
   116 000001E8 488B3C25[50000000]  <1>  mov rdi, %1
   116 000001F0 B800000000          <1>  mov rax, 0
   116 000001F5 E8(00000000)        <1>  call fclose
   117                                  
   118                                  .task2:
   119                                      ; Вывод содержимого контейнера
   120                                      PrintStrLn "Filled container:", [stdout]
   120                              <1>  section .data
   120 00000171 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   120 0000017A 6E7461696E65723A0A- <1>
   120 00000183 00                  <1>
   120                              <1>  section .text
   120 000001FA 488B3C25[00000000]  <1>  mov rdi, %2
   120 00000202 48BE-               <1>  mov rsi, %%arg1
   120 00000204 [7101000000000000]  <1>
   120 0000020C B800000000          <1>  mov rax, 0
   120 00000211 E8(00000000)        <1>  call fprintf
   121                                      PrintContainer cont, [len], [stdout]
   121 00000216 48BF-               <1>  mov rdi, %1
   121 00000218 [6800000000000000]  <1>
   121 00000220 8B3425[41010000]    <1>  mov esi, %2
   121 00000227 488B1425[00000000]  <1>  mov rdx, %3
   121 0000022F B800000000          <1>  mov rax, 0
   121 00000234 E8(00000000)        <1>  call OutContainer
   122                                  
   123                                      FileOpen [r13+24], "w", ofst1
   123                              <1>  section .data
   123 00000184 7700                <1>  %%rw db %2,0
   123                              <1>  section .text
   123 00000239 498B7D18            <1>  mov rdi, %1
   123 0000023D 48BE-               <1>  mov rsi, %%rw
   123 0000023F [8401000000000000]  <1>
   123 00000247 B800000000          <1>  mov rax, 0
   123 0000024C E8(00000000)        <1>  call fopen
   123 00000251 48890425[58000000]  <1>  mov [%3], rax
   124                                      PrintStrLn "Filled container:", [ofst1]
   124                              <1>  section .data
   124 00000186 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   124 0000018F 6E7461696E65723A0A- <1>
   124 00000198 00                  <1>
   124                              <1>  section .text
   124 00000259 488B3C25[58000000]  <1>  mov rdi, %2
   124 00000261 48BE-               <1>  mov rsi, %%arg1
   124 00000263 [8601000000000000]  <1>
   124 0000026B B800000000          <1>  mov rax, 0
   124 00000270 E8(00000000)        <1>  call fprintf
   125                                      PrintContainer cont, [len], [ofst1]
   125 00000275 48BF-               <1>  mov rdi, %1
   125 00000277 [6800000000000000]  <1>
   125 0000027F 8B3425[41010000]    <1>  mov esi, %2
   125 00000286 488B1425[58000000]  <1>  mov rdx, %3
   125 0000028E B800000000          <1>  mov rax, 0
   125 00000293 E8(00000000)        <1>  call OutContainer
   126                                      FileClose [ofst1]
   126 00000298 488B3C25[58000000]  <1>  mov rdi, %1
   126 000002A0 B800000000          <1>  mov rax, 0
   126 000002A5 E8(00000000)        <1>  call fclose
   127                                  
   128                                      ; Вычисление времени старта
   129 000002AA B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   130 000002AF 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   131 000002B1 488D3425[20000000]          lea rsi, [startTime]
   132 000002B9 0F05                        syscall        ; [time] contains number of seconds
   133                                                     ; [time + 8] contains number of nanoseconds
   134                                  
   135                                      ContainerSum cont, [len], [sum]
   135 000002BB 48BF-               <1>  mov rdi, %1
   135 000002BD [6800000000000000]  <1>
   135 000002C5 488B3425[41010000]  <1>  mov rsi, %2
   135 000002CD E8(00000000)        <1>  call PerimeterSumContainer
   135 000002D2 F20F110425-         <1>  movsd %3, xmm0
   135 000002D7 [08000000]          <1>
   136                                  
   137                                      ; Вычисление времени завершения
   138 000002DB B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   139 000002E0 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   140 000002E2 488D3425[30000000]          lea rsi, [endTime]
   141 000002EA 0F05                        syscall        ; [time] contains number of seconds
   142                                                     ; [time + 8] contains number of nanoseconds
   143                                  
   144                                      ; Получение времени работы
   145 000002EC 488B0425[30000000]          mov rax, [endTime]
   146 000002F4 482B0425[20000000]          sub rax, [startTime]
   147 000002FC 488B1C25[38000000]          mov rbx, [endTime+8]
   148 00000304 488B0C25[28000000]          mov rcx, [startTime+8]
   149 0000030C 4839CB                      cmp rbx, rcx
   150 0000030F 7D0A                        jge .subNanoOnly
   151                                      ; иначе занимаем секунду
   152 00000311 48FFC8                      dec rax
   153 00000314 4881C300CA9A3B              add rbx, 1000000000
   154                                  .subNanoOnly:
   155 0000031B 482B1C25[28000000]          sub rbx, [startTime+8]
   156 00000323 48890425[40000000]          mov [deltaTime], rax
   157 0000032B 48891C25[48000000]          mov [deltaTime+8], rbx
   158                                  
   159                                      ; Вывод периметра нескольких фигур
   160                                      PrintStrLn "Sorted Container:", [stdout]
   160                              <1>  section .data
   160 00000199 536F7274656420436F- <1>  %%arg1 db %1,10,0
   160 000001A2 6E7461696E65723A0A- <1>
   160 000001AB 00                  <1>
   160                              <1>  section .text
   160 00000333 488B3C25[00000000]  <1>  mov rdi, %2
   160 0000033B 48BE-               <1>  mov rsi, %%arg1
   160 0000033D [9901000000000000]  <1>
   160 00000345 B800000000          <1>  mov rax, 0
   160 0000034A E8(00000000)        <1>  call fprintf
   161                                      PrintContainer cont, [len], [stdout]
   161 0000034F 48BF-               <1>  mov rdi, %1
   161 00000351 [6800000000000000]  <1>
   161 00000359 8B3425[41010000]    <1>  mov esi, %2
   161 00000360 488B1425[00000000]  <1>  mov rdx, %3
   161 00000368 B800000000          <1>  mov rax, 0
   161 0000036D E8(00000000)        <1>  call OutContainer
   162                                      ;PrintDouble [sum], [stdout]
   163                                      PrintStr ". Calculaton time = ", [stdout]
   163                              <1>  section .data
   163 000001AC 2E2043616C63756C61- <1>  %%arg1 db %1,0
   163 000001B5 746F6E2074696D6520- <1>
   163 000001BE 3D2000              <1>
   163                              <1>  section .text
   163 00000372 488B3C25[00000000]  <1>  mov rdi, %2
   163 0000037A 48BE-               <1>  mov rsi, %%arg1
   163 0000037C [AC01000000000000]  <1>
   163 00000384 B800000000          <1>  mov rax, 0
   163 00000389 E8(00000000)        <1>  call fprintf
   164                                      PrintLLUns [deltaTime], [stdout]
   164                              <1>  section .data
   164 000001C1 256C6C7500          <1>  %%arg1 db "%llu",0
   164                              <1>  section .text
   164 0000038E 488B3C25[00000000]  <1>  mov rdi, %2
   164 00000396 48BE-               <1>  mov rsi, %%arg1
   164 00000398 [C101000000000000]  <1>
   164 000003A0 488B1425[40000000]  <1>  mov rdx, %1
   164 000003A8 B800000000          <1>  mov rax, 0
   164 000003AD E8(00000000)        <1>  call fprintf
   165                                      PrintStr " sec, ", [stdout]
   165                              <1>  section .data
   165 000001C6 207365632C2000      <1>  %%arg1 db %1,0
   165                              <1>  section .text
   165 000003B2 488B3C25[00000000]  <1>  mov rdi, %2
   165 000003BA 48BE-               <1>  mov rsi, %%arg1
   165 000003BC [C601000000000000]  <1>
   165 000003C4 B800000000          <1>  mov rax, 0
   165 000003C9 E8(00000000)        <1>  call fprintf
   166                                      PrintLLUns [deltaTime+8], [stdout]
   166                              <1>  section .data
   166 000001CD 256C6C7500          <1>  %%arg1 db "%llu",0
   166                              <1>  section .text
   166 000003CE 488B3C25[00000000]  <1>  mov rdi, %2
   166 000003D6 48BE-               <1>  mov rsi, %%arg1
   166 000003D8 [CD01000000000000]  <1>
   166 000003E0 488B1425[48000000]  <1>  mov rdx, %1
   166 000003E8 B800000000          <1>  mov rax, 0
   166 000003ED E8(00000000)        <1>  call fprintf
   167                                      PrintStr " nsec", [stdout]
   167                              <1>  section .data
   167 000001D2 206E73656300        <1>  %%arg1 db %1,0
   167                              <1>  section .text
   167 000003F2 488B3C25[00000000]  <1>  mov rdi, %2
   167 000003FA 48BE-               <1>  mov rsi, %%arg1
   167 000003FC [D201000000000000]  <1>
   167 00000404 B800000000          <1>  mov rax, 0
   167 00000409 E8(00000000)        <1>  call fprintf
   168                                      PrintStr 10, [stdout]
   168                              <1>  section .data
   168 000001D8 0A00                <1>  %%arg1 db %1,0
   168                              <1>  section .text
   168 0000040E 488B3C25[00000000]  <1>  mov rdi, %2
   168 00000416 48BE-               <1>  mov rsi, %%arg1
   168 00000418 [D801000000000000]  <1>
   168 00000420 B800000000          <1>  mov rax, 0
   168 00000425 E8(00000000)        <1>  call fprintf
   169                                  
   170                                      FileOpen [r13+32], "w", ofst2
   170                              <1>  section .data
   170 000001DA 7700                <1>  %%rw db %2,0
   170                              <1>  section .text
   170 0000042A 498B7D20            <1>  mov rdi, %1
   170 0000042E 48BE-               <1>  mov rsi, %%rw
   170 00000430 [DA01000000000000]  <1>
   170 00000438 B800000000          <1>  mov rax, 0
   170 0000043D E8(00000000)        <1>  call fopen
   170 00000442 48890425[60000000]  <1>  mov [%3], rax
   171                                      PrintStrLn  "Sorted Container:", [ofst2]
   171                              <1>  section .data
   171 000001DC 536F7274656420436F- <1>  %%arg1 db %1,10,0
   171 000001E5 6E7461696E65723A0A- <1>
   171 000001EE 00                  <1>
   171                              <1>  section .text
   171 0000044A 488B3C25[60000000]  <1>  mov rdi, %2
   171 00000452 48BE-               <1>  mov rsi, %%arg1
   171 00000454 [DC01000000000000]  <1>
   171 0000045C B800000000          <1>  mov rax, 0
   171 00000461 E8(00000000)        <1>  call fprintf
   172                                      PrintContainer cont, [len], [ofst2]
   172 00000466 48BF-               <1>  mov rdi, %1
   172 00000468 [6800000000000000]  <1>
   172 00000470 8B3425[41010000]    <1>  mov esi, %2
   172 00000477 488B1425[60000000]  <1>  mov rdx, %3
   172 0000047F B800000000          <1>  mov rax, 0
   172 00000484 E8(00000000)        <1>  call OutContainer
   173                                      ;PrintDouble [sum], [ofst2]
   174                                      PrintStr ". Calculaton time = ", [ofst2]
   174                              <1>  section .data
   174 000001EF 2E2043616C63756C61- <1>  %%arg1 db %1,0
   174 000001F8 746F6E2074696D6520- <1>
   174 00000201 3D2000              <1>
   174                              <1>  section .text
   174 00000489 488B3C25[60000000]  <1>  mov rdi, %2
   174 00000491 48BE-               <1>  mov rsi, %%arg1
   174 00000493 [EF01000000000000]  <1>
   174 0000049B B800000000          <1>  mov rax, 0
   174 000004A0 E8(00000000)        <1>  call fprintf
   175                                      PrintLLUns [deltaTime], [ofst2]
   175                              <1>  section .data
   175 00000204 256C6C7500          <1>  %%arg1 db "%llu",0
   175                              <1>  section .text
   175 000004A5 488B3C25[60000000]  <1>  mov rdi, %2
   175 000004AD 48BE-               <1>  mov rsi, %%arg1
   175 000004AF [0402000000000000]  <1>
   175 000004B7 488B1425[40000000]  <1>  mov rdx, %1
   175 000004BF B800000000          <1>  mov rax, 0
   175 000004C4 E8(00000000)        <1>  call fprintf
   176                                      PrintStr " sec, ", [ofst2]
   176                              <1>  section .data
   176 00000209 207365632C2000      <1>  %%arg1 db %1,0
   176                              <1>  section .text
   176 000004C9 488B3C25[60000000]  <1>  mov rdi, %2
   176 000004D1 48BE-               <1>  mov rsi, %%arg1
   176 000004D3 [0902000000000000]  <1>
   176 000004DB B800000000          <1>  mov rax, 0
   176 000004E0 E8(00000000)        <1>  call fprintf
   177                                      PrintLLUns [deltaTime+8], [ofst2]
   177                              <1>  section .data
   177 00000210 256C6C7500          <1>  %%arg1 db "%llu",0
   177                              <1>  section .text
   177 000004E5 488B3C25[60000000]  <1>  mov rdi, %2
   177 000004ED 48BE-               <1>  mov rsi, %%arg1
   177 000004EF [1002000000000000]  <1>
   177 000004F7 488B1425[48000000]  <1>  mov rdx, %1
   177 000004FF B800000000          <1>  mov rax, 0
   177 00000504 E8(00000000)        <1>  call fprintf
   178                                      PrintStr " nsec", [ofst2]
   178                              <1>  section .data
   178 00000215 206E73656300        <1>  %%arg1 db %1,0
   178                              <1>  section .text
   178 00000509 488B3C25[60000000]  <1>  mov rdi, %2
   178 00000511 48BE-               <1>  mov rsi, %%arg1
   178 00000513 [1502000000000000]  <1>
   178 0000051B B800000000          <1>  mov rax, 0
   178 00000520 E8(00000000)        <1>  call fprintf
   179                                      PrintStr 10, [ofst2]
   179                              <1>  section .data
   179 0000021B 0A00                <1>  %%arg1 db %1,0
   179                              <1>  section .text
   179 00000525 488B3C25[60000000]  <1>  mov rdi, %2
   179 0000052D 48BE-               <1>  mov rsi, %%arg1
   179 0000052F [1B02000000000000]  <1>
   179 00000537 B800000000          <1>  mov rax, 0
   179 0000053C E8(00000000)        <1>  call fprintf
   180                                      FileClose [ofst2]
   180 00000541 488B3C25[60000000]  <1>  mov rdi, %1
   180 00000549 B800000000          <1>  mov rax, 0
   180 0000054E E8(00000000)        <1>  call fclose
   181                                  
   182                                      PrintStrLn "Stop", [stdout]
   182                              <1>  section .data
   182 0000021D 53746F700A00        <1>  %%arg1 db %1,10,0
   182                              <1>  section .text
   182 00000553 488B3C25[00000000]  <1>  mov rdi, %2
   182 0000055B 48BE-               <1>  mov rsi, %%arg1
   182 0000055D [1D02000000000000]  <1>
   182 00000565 B800000000          <1>  mov rax, 0
   182 0000056A E8(00000000)        <1>  call fprintf
   183 0000056F EB5C                        jmp .return
   184                                  .fall1:
   185                                      PrintStr "incorrect numer of figures = ", [stdout]
   185                              <1>  section .data
   185 00000223 696E636F7272656374- <1>  %%arg1 db %1,0
   185 0000022C 206E756D6572206F66- <1>
   185 00000235 206669677572657320- <1>
   185 0000023E 3D2000              <1>
   185                              <1>  section .text
   185 00000571 488B3C25[00000000]  <1>  mov rdi, %2
   185 00000579 48BE-               <1>  mov rsi, %%arg1
   185 0000057B [2302000000000000]  <1>
   185 00000583 B800000000          <1>  mov rax, 0
   185 00000588 E8(00000000)        <1>  call fprintf
   186                                      PrintInt [num], [stdout]
   186                              <1>  section .data
   186 00000241 256400              <1>  %%arg1 db "%d",0
   186                              <1>  section .text
   186 0000058D 488B3C25[00000000]  <1>  mov rdi, %2
   186 00000595 48BE-               <1>  mov rsi, %%arg1
   186 00000597 [4102000000000000]  <1>
   186 0000059F 488B1425[04000000]  <1>  mov rdx, %1
   186 000005A7 B800000000          <1>  mov rax, 0
   186 000005AC E8(00000000)        <1>  call fprintf
   187                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   187                              <1>  section .data
   187 00000244 2E205365742030203C- <1>  %%arg1 db %1,10,0
   187 0000024D 206E756D626572203C- <1>
   187 00000256 3D2031303030300A00  <1>
   187                              <1>  section .text
   187 000005B1 488B3C25[00000000]  <1>  mov rdi, %2
   187 000005B9 48BE-               <1>  mov rsi, %%arg1
   187 000005BB [4402000000000000]  <1>
   187 000005C3 B800000000          <1>  mov rax, 0
   187 000005C8 E8(00000000)        <1>  call fprintf
   188                                  .return:
   189 000005CD C9                      leave
   190 000005CE C3                      ret
